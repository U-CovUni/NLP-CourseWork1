#Importing the dependencies
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.preprocessing import LabelEncoder
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout
from tensorflow.keras.utils import to_categorical
from sklearn.metrics import accuracy_score

# Loading the dataset from googledrive
file_path = '/content/drive/MyDrive/SemEval_in_tweets/semeval.csv'
data = pd.read_csv(file_path)

# Converting the stance labels to numerical format
stance_mapping = {'AGAINST': 0, 'FAVOR': 1, 'NONE': 2}
data['Stance'] = data['Stance'].map(stance_mapping)

# Splitting the data into training and test sets
train_data, test_data = train_test_split(data, test_size=0.2, random_state=42)

# Initializing the CountVectorizer (Bag of Words)
vectorizer = CountVectorizer(max_features=10000, stop_words='english')

# Fitting and transforming the training data, transform the test data
X_train = vectorizer.fit_transform(train_data['Tweet']).toarray()
X_test = vectorizer.transform(test_data['Tweet']).toarray()

# Extracting the labels
y_train = train_data['Stance']
y_test = test_data['Stance']

# Encoding the labels
encoder = LabelEncoder()
y_train_encoded = encoder.fit_transform(y_train)
y_test_encoded = encoder.transform(y_test)

# Converting labels to categorical (one-hot encoding)
y_train_categorical = to_categorical(y_train_encoded, num_classes=3)
y_test_categorical = to_categorical(y_test_encoded, num_classes=3)

# Building the neural network model
model = Sequential([
    Dense(512, input_shape=(X_train.shape[1],), activation='relu'),
    Dropout(0.5),
    Dense(512, activation='relu'),
    Dropout(0.5),
    Dense(3, activation='softmax')
])

# Compiling the model
model.compile(loss='categorical_crossentropy',
              optimizer='adam',
              metrics=['accuracy'])

# Summary of the model
model.summary()

# Model training
history = model.fit(X_train, y_train_categorical, epochs=10, validation_data=(X_test, y_test_categorical), batch_size=32)

# EModel Evaluation
loss, accuracy = model.evaluate(X_test, y_test_categorical, verbose=2)
print(f'Test Accuracy: {accuracy}')
